export const questions = [
  {
    "id": 1,
    "topic": "설계단계 보안약점",
    "question": "소프트웨어 개발 생명주기(SDLC) 중 설계 단계에서 고려해야 할 보안활동으로 가장 적절한 것은?",
    "options": [
      "단위 테스트 자동화",
      "사용자 요구사항 수집",
      "보안 요구사항 정의",
      "운영 로그 수집 구성"
    ],
    "answer": 2,
    "explanation": "설계 단계에서는 기능 요구사항과 더불어 보안 요구사항도 함께 정의되어야 한다."
  },
  {
    "id": 2,
    "topic": "구현단계 보안약점",
    "question": "XSS(Cross Site Scripting) 공격을 방지하기 위한 가장 기본적인 대응 방법은?",
    "options": [
      "사용자의 쿠키를 암호화한다",
      "출력 시 HTML 이스케이프 처리를 한다",
      "사용자 입력을 무조건 차단한다",
      "DB 연결을 끊는다"
    ],
    "answer": 1,
    "explanation": "XSS는 브라우저 출력 시 스크립트가 실행되므로 출력 시 이스케이프 처리가 핵심이다."
  },
  {
    "id": 3,
    "topic": "구현단계 보안약점",
    "question": "아래 코드에서 발생할 수 있는 보안약점은?\nlet password = req.query.password;\nif (password === \"admin123\") { grantAccess(); }",
    "options": [
      "인가 우회",
      "하드코딩된 인증정보",
      "SQL Injection",
      "세션 고정"
    ],
    "answer": 1,
    "explanation": "인증정보가 코드에 직접 포함된 하드코딩된 비밀번호 약점이다 (CWE-798)."
  },
  {
    "id": 4,
    "topic": "설계단계 보안약점",
    "question": "입력값 검증 보안약점 중 가장 안전한 방식은?",
    "options": [
      "블랙리스트 기반 필터링",
      "정규표현식 적용",
      "화이트리스트 기반 허용",
      "클라이언트 측 필터링"
    ],
    "answer": 2,
    "explanation": "허용된 값만 통과시키는 화이트리스트 방식이 가장 안전하다."
  },
  {
    "id": 5,
    "topic": "전주기 보안관리",
    "question": "보안 점검 자동화 시스템을 통해 다음 중 가능한 작업은?",
    "options": [
      "사용자 경험 테스트",
      "IDE 코드 추천 개선",
      "코드 기반 보안약점 탐지",
      "외부 감사 보고서 작성"
    ],
    "answer": 2,
    "explanation": "자동화 도구(SAST, DAST 등)는 코드 내 보안약점을 자동으로 분석한다."
  },
  {
    "id": 6,
    "topic": "보안요구사항",
    "question": "Secure Coding 원칙 중 'Least Privilege' 원칙이 의미하는 것은?",
    "options": [
      "모든 요청은 관리자 권한으로 실행",
      "최대한 많은 기능을 사용자에게 허용",
      "최소 권한으로 필요한 작업만 수행",
      "권한 검사를 생략하고 일괄 처리"
    ],
    "answer": 2,
    "explanation": "최소 권한 원칙은 불필요한 권한 사용을 제한하여 공격 범위를 줄인다."
  },
  {
    "id": 7,
    "topic": "설계단계 보안약점",
    "question": "다음 중 설계단계 보안약점에 해당하지 않는 것은?",
    "options": [
      "인증 우회 가능성",
      "세션 고정",
      "보안 요구사항 누락",
      "보안 로직 누락"
    ],
    "answer": 1,
    "explanation": "세션 고정은 구현단계의 약점이며, 나머지는 설계상 고려사항이다."
  },
  {
    "id": 8,
    "topic": "보안점검도구",
    "question": "보안 테스트 자동화 도구 중 정적 분석 도구의 특징으로 가장 적절한 것은?",
    "options": [
      "실행 중 동작을 분석한다",
      "운영 환경에서 테스트한다",
      "소스코드를 기반으로 분석한다",
      "사용자 행동을 시뮬레이션한다"
    ],
    "answer": 2,
    "explanation": "정적 분석 도구(SAST)는 소스코드 상태에서 보안약점을 분석한다."
  },
  {
    "id": 9,
    "topic": "보안원칙",
    "question": "보안 프레임워크에서 CIA 3요소 중 무결성(Integrity)에 해당하는 설명은?",
    "options": [
      "정보에 접근할 수 있는 자를 제한",
      "정보가 무단으로 변경되지 않도록 보호",
      "정보가 항상 사용 가능하도록 보장",
      "정보 유출 시 복구를 자동화함"
    ],
    "answer": 1,
    "explanation": "무결성은 정보가 승인되지 않은 방식으로 변경되지 않도록 보호하는 것을 의미한다."
  },
  {
    "id": 10,
    "topic": "보안요구사항",
    "question": "개발 보안 요구사항 중 ‘로그 및 감사기록의 보존’과 가장 관련 있는 항목은?",
    "options": [
      "CIA 중 Confidentiality",
      "권한 상승 방지",
      "비인가 접근 탐지 및 추적",
      "비밀번호 정책 강화"
    ],
    "answer": 2,
    "explanation": "로그는 보안 사고 분석 및 이상 행위 추적을 위한 근거 자료다."
  },
  {
    "id": 11,
    "topic": "설계단계 보안약점",
    "question": "보안 설계 시 입력값 검증이 누락될 경우 가장 우려되는 공격 유형은?",
    "options": [
      "DoS 공격",
      "SQL Injection",
      "디렉토리 리스팅",
      "인증 우회"
    ],
    "answer": 1,
    "explanation": "입력값 검증이 없으면 SQL 구문에 직접 삽입되어 SQL Injection이 발생할 수 있다."
  },
  {
    "id": 12,
    "topic": "구현단계 보안약점",
    "question": "다음 중 하드코딩된 인증정보에 대한 설명으로 가장 적절한 것은?",
    "options": [
      "코드의 가독성을 높인다",
      "보안을 강화한다",
      "유출 시 전체 시스템 위협 가능",
      "암호화되어 있으면 안전하다"
    ],
    "answer": 2,
    "explanation": "하드코딩된 인증정보는 유출되면 전체 시스템이 침해될 수 있으므로 보안약점이다."
  },
  {
    "id": 13,
    "topic": "구현단계 보안약점",
    "question": "보안 로그를 남기지 않는 경우 발생할 수 있는 문제는?",
    "options": [
      "시스템 속도 저하",
      "공격 탐지 및 추적 불가",
      "서비스 가용성 감소",
      "정상 사용자 제한"
    ],
    "answer": 1,
    "explanation": "보안 로그가 없으면 이상 행위 분석 및 사고 대응이 어렵다."
  },
  {
    "id": 14,
    "topic": "전주기 보안관리",
    "question": "DevSecOps에서 가장 핵심적인 보안 개념은?",
    "options": [
      "보안은 테스트 이후 단계",
      "보안은 운영팀 전담",
      "보안은 개발 초기부터 통합",
      "보안은 릴리즈 이후 적용"
    ],
    "answer": 2,
    "explanation": "DevSecOps는 개발 초기부터 보안을 내재화하여 자동화하고 지속적으로 적용하는 개념이다."
  },
  {
    "id": 15,
    "topic": "보안원칙",
    "question": "다음 중 '기밀성(Confidentiality)' 원칙에 해당하는 보안 조치는?",
    "options": [
      "접근 제어",
      "무결성 체크",
      "가용성 확보",
      "세션 타임아웃"
    ],
    "answer": 0,
    "explanation": "기밀성은 비인가된 접근을 방지하는 것이 핵심이며 접근제어가 대표적인 조치다."
  },
  {
    "id": 16,
    "topic": "설계단계 보안약점",
    "question": "권한 구분이 명확하지 않은 경우 발생 가능한 보안 사고는?",
    "options": [
      "세션 하이재킹",
      "권한 상승",
      "XSS",
      "CSRF"
    ],
    "answer": 1,
    "explanation": "권한 구분이 없으면 일반 사용자가 관리자 권한으로 동작할 수 있는 권한 상승 취약점이 생긴다."
  },
  {
    "id": 17,
    "topic": "구현단계 보안약점",
    "question": "클라이언트 측 자바스크립트에서 중요한 로직을 처리할 경우 우려되는 사항은?",
    "options": [
      "호환성 저하",
      "속도 저하",
      "소스코드 노출 및 위변조",
      "디버깅 오류"
    ],
    "answer": 2,
    "explanation": "클라이언트 측 코드는 쉽게 분석되고 조작될 수 있어 보안상 민감한 로직은 서버에서 처리해야 한다."
  },
  {
    "id": 18,
    "topic": "보안점검도구",
    "question": "동적 분석 도구(DAST)의 특징으로 옳은 것은?",
    "options": [
      "코드 수준에서 분석",
      "실행 환경에서 취약점 탐지",
      "빌드 전 단계 사용",
      "컴파일 오류 탐지"
    ],
    "answer": 1,
    "explanation": "DAST는 실행 중 동작을 기반으로 보안 문제를 탐지하는 도구이다."
  },
  {
    "id": 19,
    "topic": "보안요구사항",
    "question": "사용자 인증 실패 시 반환하는 에러 메시지에서 주의해야 할 점은?",
    "options": [
      "가능한 많은 정보 제공",
      "구체적인 실패 이유 포함",
      "비밀번호 오류만 안내",
      "공격자가 정보를 추측할 수 없게 일반적인 오류 메시지 사용"
    ],
    "answer": 3,
    "explanation": "구체적인 메시지는 공격자에게 단서를 제공하므로 일반화된 메시지를 사용하는 것이 안전하다."
  },
  {
    "id": 20,
    "topic": "설계단계 보안약점",
    "question": "보안 요구사항이 설계 문서에 반영되지 않았을 때 우려되는 결과는?",
    "options": [
      "개발 일정 단축",
      "테스트 비용 절감",
      "보안 기능 누락",
      "운영 부하 감소"
    ],
    "answer": 2,
    "explanation": "설계에 반영되지 않으면 실제 구현 단계에서 보안이 빠지기 쉬워 보안 기능이 누락된다."
  },
  {
    "id": 31,
    "topic": "전송구간 보안",
    "question": "민감정보를 HTTP로 전송할 경우 발생할 수 있는 주요 보안 위협은?",
    "options": [
      "세션 고정",
      "중간자 공격(MITM)",
      "SQL Injection",
      "XSS"
    ],
    "answer": 1,
    "explanation": "HTTPS가 아닌 HTTP를 사용할 경우 중간자 공격에 의해 민감정보가 탈취될 수 있다."
  },
  {
    "id": 32,
    "topic": "API 보안",
    "question": "API Key가 URL에 포함되어 노출될 경우 보안상 취약한 이유는?",
    "options": [
      "인증 성능 저하",
      "로그에 노출 가능성",
      "서버 과부하",
      "응답 속도 증가"
    ],
    "answer": 1,
    "explanation": "API Key가 URL에 포함되면 웹서버 로그 등에 노출될 수 있어 보안 위협이 된다."
  },
  {
    "id": 33,
    "topic": "예외처리",
    "question": "개발 시 예외 메시지를 상세하게 출력하면 발생할 수 있는 문제는?",
    "options": [
      "성능 저하",
      "정보 노출",
      "디버깅 어려움",
      "오류 무시"
    ],
    "answer": 1,
    "explanation": "상세 예외 메시지는 내부 시스템 정보나 스택 구조를 노출하여 공격자에게 단서를 줄 수 있다."
  },
  {
    "id": 34,
    "topic": "세션관리",
    "question": "다중 로그인 제한이 없는 시스템에서 발생할 수 있는 보안 위협은?",
    "options": [
      "정보 무결성 위협",
      "비인가 접근",
      "세션 탈취 감지",
      "서비스 거부"
    ],
    "answer": 1,
    "explanation": "동일 계정의 다중 접속을 허용할 경우 인증 우회나 도용된 계정으로 접근이 가능해질 수 있다."
  },
  {
    "id": 35,
    "topic": "설정 보안",
    "question": "기본 관리자 계정(admin/admin 등)을 사용한 시스템의 위험성은?",
    "options": [
      "서비스 속도 저하",
      "무결성 위협",
      "자동화 도구를 통한 무차별 공격 가능성",
      "로그 기록 누락"
    ],
    "answer": 2,
    "explanation": "기본 계정은 공격자에게 잘 알려져 있어 자동화된 공격 도구로 쉽게 침투당할 수 있다."
  },
  {
    "id": 36,
    "topic": "인증 보안",
    "question": "로그인 시 실패 횟수 제한이 없는 경우 발생할 수 있는 위협은?",
    "options": [
      "SQL Injection",
      "계정 도용을 위한 무차별 대입 공격",
      "정보 노출",
      "XSS"
    ],
    "answer": 1,
    "explanation": "로그인 실패 제한이 없으면 공격자가 비밀번호를 무작위로 대입하는 brute-force 공격이 가능해진다."
  },
  {
    "id": 37,
    "topic": "API 인증",
    "question": "다음 중 인증 없이 호출 가능한 API가 존재할 경우 발생할 수 있는 보안 위험은?",
    "options": [
      "서비스 지연",
      "비인가 데이터 접근",
      "속도 저하",
      "DNS 오류"
    ],
    "answer": 1,
    "explanation": "인증 없이 접근 가능한 API는 공격자에게 민감정보를 노출하거나 시스템 제어 권한을 줄 수 있다."
  },
  {
    "id": 38,
    "topic": "암호화",
    "question": "다음 중 안전하지 않은 암호화 알고리즘은?",
    "options": [
      "AES",
      "RSA",
      "ECB",
      "ChaCha20"
    ],
    "answer": 2,
    "explanation": "ECB는 동일한 평문 블록이 동일한 암호문으로 암호화되어 패턴이 드러나는 위험이 있다."
  },
  {
    "id": 39,
    "topic": "전송보안",
    "question": "사용자가 비밀번호를 입력할 때 HTTPS를 사용하지 않으면 어떤 문제가 발생하는가?",
    "options": [
      "트래픽 증가",
      "MITM 공격에 의한 탈취",
      "세션 재사용",
      "SQL 오류"
    ],
    "answer": 1,
    "explanation": "HTTPS를 사용하지 않으면 중간자 공격으로 비밀번호가 평문 상태로 노출될 수 있다."
  },
  {
    "id": 40,
    "topic": "로그 보안",
    "question": "로그 위변조를 방지하기 위한 가장 적절한 대응은?",
    "options": [
      "로그 압축",
      "로그 암호화 및 무결성 검증",
      "로그 주기적 삭제",
      "로그 용량 제한"
    ],
    "answer": 1,
    "explanation": "로그의 위변조를 방지하기 위해 암호화 및 디지털 서명 등을 통한 무결성 검증이 필요하다."
  }
];